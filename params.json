{"name":"Aye Aye Api","tagline":"The RESTful API framework that works for you, not the other way around.","body":"# Aye Aye API\r\n\r\n[![Minimum PHP Version](https://img.shields.io/badge/php-%3E%3D%205.4-8892BF.svg)]\r\n(https://php.net/)\r\n[![License](https://img.shields.io/packagist/l/ayeaye/api.svg)]\r\n(https://raw.githubusercontent.com/AyeAyeApi/Api/master/LICENSE.txt)\r\n[![Version](https://img.shields.io/packagist/vpre/ayeaye/api.svg)]\r\n(https://packagist.org/packages/ayeaye/api)\r\n[![Build Status](https://img.shields.io/travis/AyeAyeApi/Api/master.svg)]\r\n(https://travis-ci.org/AyeAyeApi/Api/branches)\r\n\r\nAye Aye API is a micro framework for building API's, and we mean _micro_. It's designed to be easy to use, fast to\r\ndevelop with and to scale from tiny projects to world devouring titans.\r\n\r\n## Quick Start Guide\r\n\r\nCreate a project and include Aye Aye\r\n\r\n```bash\r\ncomposer init --require=\"ayeaye/api ^1.0.0\" -n\r\ncomposer install\r\n```\r\n\r\nWrite your first controller\r\n\r\n```php\r\n<?php\r\n// HelloWorldController.php\r\n\r\nuse AyeAye\\Api\\Controller;\r\n\r\nclass HelloWorldController extends Controller\r\n{\r\n    /**\r\n     * Says hello\r\n     * @param string $name Optional, defaults to 'Captain'\r\n     * @returns string\r\n     */\r\n    public function getHelloEndpoint($name = 'Captain')\r\n    {\r\n        return \"Aye Aye $name\";\r\n    }\r\n}\r\n```\r\n\r\nWrite an entry point into the API\r\n\r\n```php\r\n<?php\r\n// index.php\r\n\r\nrequire_once '../vendor/autoload.php';\r\nrequire_once 'HelloWorldController.php';\r\n\r\nuse AyeAye\\Api\\Api;\r\n\r\n$initialController = new HelloWorldController();\r\n$api = new Api($initialController);\r\n\r\n$api->go()->respond();\r\n```\r\n\r\nEnjoy\r\n\r\n```bash\r\n$ php -S localhost:8000 index.php &\r\n$ curl localhost:8000/hello\r\n$ curl localhost:8000/hello?name=Sandwiches\r\n$ curl localhost:8000\r\n```\r\n\r\nDon't forget to close the server down when you're done\r\n\r\n```bash\r\n$ fg\r\n^C\r\n```\r\n\r\n## Why should you use it?\r\n\r\nDeveloping in Aye Aye is simple, clean and logical. Aye Aye processes requests and gives them to the appropriate\r\nendpoint on the appropriate controller. You write the code to process the data and return the result. That's it.\r\nSeriously.\r\n\r\nThere's no fluff. You don't need to learn new database tools, or logging interfaces (assuming you know [PSR-3]\r\n(https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md), and you should) or\r\nauthentication methods.\r\n\r\nIf you follow [PSR-4](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md), then\r\nyour API will look a lot like your directory structure, making maintainence a breeze.\r\n\r\nAye Aye is self aware... though not in the scary killer robot way. It knows about itself. It knows what endpoints\r\nand what sub-controllers are available on any given controller, and by reading the documentation in the doc-block\r\ncomments, it can tell users what those end points do! You only need to write your documentation once, for developers,\r\nand Aye Aye will read it and tell your users what those end points do, and what parameters they take.\r\n\r\nBy default it can read and format data as json (the default) and xml. It also reads GET, POST and HEADER. Data from\r\nthese sources is passed into your methods for you. In the traditional computational model `input -> process -> output`\r\nAye Aye takes care of the in and out, you just have to worry about the process!\r\n\r\n## Installation\r\n\r\nCurrently, Aye Aye only supports installation via [Composer](https://github.com/composer/composer), and requires PHP 5.4\r\nor above. Aye Aye should also work with [HHVM](https://github.com/facebook/hhvm) though this isn't actively supported.\r\n\r\nTo include Aye Aye in your Composer project we recommend using the following.\r\n\r\n```bash\r\ncomposer require --prefer-dist \"AyeAye/Api 0.13.*\"\r\n```\r\n\r\n__Important__: While Aye Aye has stable and usable releases, it's version 1 release has not yet been finalised. Minor\r\nversion increments (see [Semantic Versioning](http://semver.org)) may break backwards compatibility.\r\n\r\n## Quick Start explained\r\n\r\nThe most important and powerful feature of Aye Aye is it's controllers. Controllers do two things. They provide\r\nendpoints, and access to other controllers.\r\n\r\nControllers are classes that extend `AyeAye\\Api\\Controller`\r\n\r\nEndpoints are methods on the controllers that are named in this way `[verb][name]Endpoint(...)`\r\n\r\n- The `[verb]` is the http verb, the endpoint is waiting for.\r\n- The `[name]` is the name of the endpoint.\r\n- `Endpoint` is literally the word \"Endpoint\". It helps us know what we're dealing with.\r\n\r\nYou can put define any parameters you like for the method, and Aye Aye will automatically populate them for you.\r\n\r\nControllers can also reference other controllers with methods named like this `[name]Controller()`\r\n\r\nThese should return a controller object, and it's how Aye Aye navigates the Api.\r\n\r\n### The hello world controller\r\n\r\nAbove we wrote a controller to say hello.\r\n\r\n```php\r\n<?php\r\n// HelloWorldController.php\r\n\r\nuse AyeAye\\Api\\Controller;\r\n\r\nclass HelloWorldController extends Controller\r\n{\r\n    /**\r\n     * Says hello\r\n     * @param string $name Optional, defaults to 'Captain'\r\n     * @returns string\r\n     */\r\n    public function getHelloEndpoint($name = 'Captain')\r\n    {\r\n        return \"Aye Aye $name\";\r\n    }\r\n}\r\n```\r\n\r\nThe one method in this controller tells you everything you need to know.\r\n * It will respond to a GET request send to the hello endpoint. \r\n * It takes one parameter, 'name', which will default to Captain\r\n * It returns a string\r\n \r\nSo how did we go from that, to sending and receiving the data with curl?\r\n\r\nWhen we created the Api object, we passed it HelloWorldController as a parameter, this tells the Api this is our\r\nstarting point. The Aye Aye identifies getHelloEndpoint as an endpoint called \"hello\" that is triggered with a GET\r\nrequest.\r\n\r\nYou'll notice that we used a PHP Doc Block to explain what the method does. This is _really_ important. Not only does\r\nit tell other developers what this end point does... it tells your API's users too!\r\n\r\nGoing back to the Quick Start guide, you might have tried querying \"/\", and you will have seen that the Api tells you\r\nit has one GET endpoint, called 'hello, that it takes one parameter, as string called name, and it described all\r\nof these things with the documentation you made for the method!\r\n\r\nThat's right, the API is truly self documenting!\r\n\r\n### Child Controllers\r\n\r\nObviously just having one controller is pretty useless. To go from one controller to the next, we use the \r\n`[name]Controller()` method. This method should return another object that extends Controller. To demonstrate that in\r\nour application quick start application, we can just return `$this`.\r\n \r\n```php\r\n<?php\r\n// HelloWorldController.php\r\n\r\nuse AyeAye\\Api\\Controller;\r\n \r\nclass HelloWorldController extends Controller\r\n{\r\n    /**\r\n     * Says hello\r\n     * @param string $name Optional, defaults to 'Captain'\r\n     * @returns string\r\n     */\r\n    public function getHelloEndpoint($name = 'Captain')\r\n    {\r\n        return \"Aye Aye $name\";\r\n    }\r\n    \r\n    /**\r\n     * lol...\r\n     * @returns $this\r\n     */\r\n    public function ayeController()\r\n    {\r\n        return $this;\r\n    }\r\n}\r\n```\r\n \r\nNow when we start our application and the fun begins!\r\n\r\n```bash\r\n$ php -S localhost:8000 public/index.php &\r\ncurl localhost:8000/aye/aye/aye/aye/hello?name=Aye%20Aye\r\n```\r\n\r\n## Contributing\r\n\r\nAye Aye is an Open Source project and contributions are very welcome.\r\n\r\n### Issues\r\n\r\nTo report problems, please open an Issue on the [GitHub Issue Tracker](https://github.com/AyeAyeApi/Api/issues).\r\n\r\n### Changes\r\n\r\nTo make changes, clone the repository and use `composer install` with the developer dependencies. \r\n\r\nBranch from `develop`. We (now) use the Git Flow naming convention with date of creation (YYYY-MM-DD). See [this guide]\r\n(http://nvie.com/posts/a-successful-git-branching-model/) for how Git Flow works.\r\n\r\nWe follow the [PSR-1](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md) and\r\n[PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) coding standards.\r\nPHPMD and PHPCS, and their rule files will help guide you in this.\r\n","google":"UA-73943600-2","note":"Don't delete this file! It's used internally to help with page regeneration."}