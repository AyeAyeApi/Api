{"name":"Aye Aye Api","tagline":"The RESTful API framework that works for you, not the other way around.","body":"# Aye Aye API\r\n\r\n[![PHP >= 5.5](https://img.shields.io/badge/php-%3E%3D%205.5-8892BF.svg)]\r\n(https://php.net/)\r\n[![License: MIT](https://img.shields.io/packagist/l/ayeaye/api.svg)]\r\n(https://raw.githubusercontent.com/AyeAyeApi/Api/master/LICENSE.txt)\r\n[![Version](https://img.shields.io/packagist/v/ayeaye/api.svg)]\r\n(https://packagist.org/packages/ayeaye/api)\r\n[![Build Status](https://img.shields.io/travis/AyeAyeApi/Api/master.svg)]\r\n(https://travis-ci.org/AyeAyeApi/Api/branches)\r\n\r\nAye Aye API is a micro framework for building API's written in PHP. It's designed to be easy to use, fast to\r\ndevelop with and to scale from tiny micro-services to world devouring titans.\r\n\r\n## Installation\r\n\r\nCreate a project and include Aye Aye.\r\n\r\n```bash\r\ncomposer init --require=\"ayeaye/api ^1.0.0\" -n\r\ncomposer install\r\n```\r\n\r\n## Quick Start Guide\r\n\r\nWhen working with Aye Aye, you will do almost all of your work in Controller classes.\r\n\r\nHere's our ubiquitous Hello World controller:\r\n\r\n```php\r\n<?php\r\n// HelloWorldController.php\r\n\r\nuse AyeAye\\Api\\Controller;\r\n\r\nclass HelloWorldController extends Controller\r\n{\r\n    /**\r\n     * Yo ho ho\r\n     * @param string $name Optional, defaults to 'Captain'\r\n     * @return string\r\n     */\r\n    public function getAyeAyeEndpoint($name = 'Captain')\r\n    {\r\n        return \"Aye Aye $name\";\r\n    }\r\n}\r\n```\r\n\r\nControllers contain endpoints and child controllers. The above controller has a single endpoint `hello` that will \r\nrespond to HTTP GET requests. This is reflected in the name which takes the form `[verb][Name]Endpoint`.\r\n\r\nThe endpoint takes one parameter, `name`, which will default to `'Captain'` if not otherwise provided. The return is\r\na string.\r\n\r\nThe API needs an entry point, which will put in index.php\r\n\r\n```php\r\n<?php\r\n// index.php\r\n\r\nrequire_once '../vendor/autoload.php';\r\nrequire_once 'HelloWorldController.php';\r\n\r\nuse AyeAye\\Api\\Api;\r\n\r\n$initialController = new HelloWorldController();\r\n$api = new Api($initialController);\r\n\r\n$api->go()->respond();\r\n```\r\n\r\nFirst we grab composer's autoloader, and our controller (which we haven't added to the autoloader). We instantiate our\r\nHelloWorldController, and pass it into the constructor of our Api object. This becomes our initialController, and it's\r\nthe only one Aye Aye needs to know about, we'll come onto why later.\r\n\r\nFinally the `->go()` method produces a Response object, with which we can `->respond()`.\r\n\r\nWe can test this using PHP's build in server:\r\n\r\n```bash\r\n$ php -S localhost:8000 index.php &\r\n\r\n$ curl localhost:8000/aye-aye                 # {\"data\":\"Aye Aye Captain\"}\r\n$ curl localhost:8000/aye-aye?name=Sandwiches # {\"data\":\"Aye Aye Sandwiches\"}\r\n```\r\n\r\nNotice how the string has been converted into a serialised object (JSON by default but the format can be selected with\r\nan `Accept` header or a file suffix).\r\n\r\nThat tests our endpoint, but what happens if you just query the root of the Api.\r\n\r\n```bash\r\n$ curl localhost:8000 # {\"data\":{\"controllers\":[],\"endpoints\":{\"get\":{\"aye-aye\":{\"summary\":\"Yo ho ho\",\"parameters\":{\"name\":{\"type\":\"string\",\"description\":\"Optional, defaults to 'Captain'\"}},\"returnType\":[\"string\"]}}}}} \r\n```\r\n\r\nLets take take a closer look at that returned string. \r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"controllers\": [],\r\n    \"endpoints\": {\r\n      \"get\": {\r\n        \"aye-aye\": {\r\n          \"summary\": \"Yo ho ho\",\r\n          \"parameters\": {\r\n            \"name\": {\r\n              \"type\": \"string\",\r\n              \"description\": \"Optional, defaults to 'Captain'\"\r\n            }\r\n          },\r\n          \"returnType\": [\r\n            \"string\"\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nAs you can see, it is an explanation of how our controller is structured. We didn't write anything more than what was\r\nexpected of us, and it makes sense to both the back end developers, and the consumers of your Api.\r\n\r\nDon't forget to close the server down when you're done.\r\n\r\n```bash\r\n$ fg\r\n^C\r\n```\r\n\r\n## Why should you use it?\r\n\r\nDeveloping in Aye Aye is simple, clean and logical. Aye Aye processes requests and gives them to the appropriate\r\nendpoint on the appropriate controller. That endpoint is simply a method, that takes a set of parameters and returns\r\nsome data. Aye Aye will work out where to find those parameters in the request, and it will format the data on return. \r\nIt even supports multiple data formats and will automatically switch based on what the user requests.\r\n\r\nThere's no fluff. You don't need to learn new database tools, or logging interfaces (assuming you know [PSR-3]\r\n(https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md), and you should) or\r\nauthentication methods. Aye Aye only provides routing, request parsing and response handling. You can use whatever\r\nyou like for the rest.\r\n\r\nIf you follow [PSR-4](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md), then\r\nyour API will look a lot like your directory structure, making maintenance a breeze.\r\n\r\nAye Aye knows about itself. It knows what endpoints and what sub-controllers are available on any given controller, and\r\nby reading the documentation in the doc-block comments, it can tell users what those end points do. You only need to \r\nwrite your documentation once, and Aye Aye will read it and tell your users what those end points do, and what\r\nparameters they take.\r\n\r\nBy default it can read and write data as json (the default) and xml, though more formats can easily be added. It also\r\nreads GET, POST and HEADER, and parametrises url slugs. Data from these sources is passed into your methods for you.\r\n\r\n## Quick Start explained\r\n\r\nThe most important and powerful feature of Aye Aye is it's controllers. Controllers do two things. They provide\r\nendpoints, and access to other controllers.\r\n\r\nControllers are classes that extend `AyeAye\\Api\\Controller`\r\n\r\nEndpoints are methods on the controllers that are named in this way `[verb][name]Endpoint(...)`\r\n\r\n- The `[verb]` is the http verb, the endpoint is waiting for.\r\n- The `[name]` is the name of the endpoint.\r\n- `Endpoint` is literally the word \"Endpoint\". It helps us know what we're dealing with.\r\n\r\nYou can define any parameters you like for the method, and Aye Aye will automatically populate them for you.\r\n\r\nControllers can also reference other controllers with methods named like this `[name]Controller()`\r\n\r\nThese should return a controller object, and it's how Aye Aye navigates the Api.\r\n\r\n### The hello world controller\r\n\r\nAbove we wrote a controller to say hello.\r\n\r\n```php\r\n<?php\r\n// HelloWorldController.php\r\n\r\nuse AyeAye\\Api\\Controller;\r\n\r\nclass HelloWorldController extends Controller\r\n{\r\n    /**\r\n     * Yo ho ho\r\n     * @param string $name Optional, defaults to 'Captain'\r\n     * @return string\r\n     */\r\n    public function getAyeAyeEndpoint($name = 'Captain')\r\n    {\r\n        return \"Aye Aye $name\";\r\n    }\r\n}\r\n```\r\n\r\nThe one method in this controller tells you everything you need to know.\r\n * It will respond to a GET request send to the hello endpoint. \r\n * It takes one parameter, 'name', which will default to Captain\r\n * It returns a string\r\n \r\nSo how did we go from that, to sending and receiving the data with curl?\r\n\r\nWhen we created the Api object, we passed it a HelloWorldController object as a parameter, this tells the Api this is \r\nour starting point. The Aye Aye identifies getAyeEndpoint as an endpoint called \"aye\" that is triggered with a GET\r\nrequest.\r\n\r\nYou'll notice that we used a PHP Doc Block to explain what the method does. This is _really_ important. Not only does\r\nit tell other developers what this end point does... it tells your API's users too, and they'll be using it in just the\r\nsame way.\r\n\r\nIn the quick start guide we queryied \"/\", and you will have seen that the Api tells you it has one GET endpoint,\r\ncalled 'aye, that it takes one parameter, as string called name, and it described all of these things with the \r\ndocumentation you made for the method!\r\n\r\n### Child Controllers\r\n\r\nObviously just having one controller is pretty useless. To go from one controller to the next, we create a\r\n`[name]Controller()` method. This method should return another object that extends Controller. To demonstrate that in\r\nour application quick start application, we can just return `$this`.\r\n \r\n```php\r\n<?php\r\n// HelloWorldController.php\r\n\r\nuse AyeAye\\Api\\Controller;\r\n \r\nclass HelloWorldController extends Controller\r\n{\r\n    /**\r\n     * Yo ho ho\r\n     * @param string $name Optional, defaults to 'Captain'\r\n     * @returns string\r\n     */\r\n    public function getAyeAyeEndpoint($name = 'Captain')\r\n    {\r\n        return \"Aye Aye $name\";\r\n    }\r\n    \r\n    /**\r\n     * lol...\r\n     * @returns $this\r\n     */\r\n    public function ayeController()\r\n    {\r\n        return $this;\r\n    }\r\n}\r\n```\r\n \r\nNow when we start our application and the fun begins!\r\n\r\n```bash\r\n$ php -S localhost:8000 public/index.php &\r\ncurl localhost:8000/aye/aye/aye/aye/aye-aye?name=Aye%20Aye # {\"data\":\"Aye Aye Aye Aye\"}\r\n```\r\n\r\n## Contributing\r\n\r\nAye Aye is an Open Source project and contributions are very welcome.\r\n\r\n### Issues\r\n\r\nTo report problems, please open an Issue on the [GitHub Issue Tracker](https://github.com/AyeAyeApi/Api/issues).\r\n\r\n### Changes\r\n\r\nSend me pull requests. Send me lots of them.\r\n\r\nWe follow the [PSR-1](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md) and\r\n[PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) coding standards.\r\nPHPMD and PHPCS, and their rule files will help guide you in this.\r\n","google":"UA-73943600-2","note":"Don't delete this file! It's used internally to help with page regeneration."}